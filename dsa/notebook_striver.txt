
Arrays medium

1. Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.You can return the answer in any order.
Input: nums = [2,7,11,15], target = 9. Output: [0,1].Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

- use hashmap
- iterate through nums, check if target-num present in hashmap
- return if match found, else add the value:index


75. Sort Colors
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.
Input: nums = [2,0,2,1,1,0] Output: [0,0,1,1,2,2]

- use two pointer, l, r
- third pointer i for each element
- if i == 0, swap to left, l++, i++
- elif i == 2, swap to right, r-- (i is not ++ here, right can contain a 0 or 1)
- else (it is a 1, so i++)


169. Majority Element
Given an array nums of size n, return the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Input: nums = [3,2,3] Output: 3

- moore's voting algorithm (more than n/2, all will be cancelled out except majority element)
- init count and majority var
- if count == 0, majority = current value
- if iter == majority, count++
- else count--


53. Maximum Subarray
Given an integer array nums, find the subarray with the largest sum, and return its sum.
Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

- Kadane's algorithm
- If a number makes the sum less than 0, make sum equate to 0
- add current element and check 